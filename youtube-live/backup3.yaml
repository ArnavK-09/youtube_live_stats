apiVersion: 0.5.0
meta:
  name: subscribers-count
  version: 0.1.0
  namespace: youtube-live

config:
  converter: json
  consumer:
    default_starting_offset:
      value: 0
      position: End

types:
  channel-fetch-response:
    type: object
    properties:
      views:
        type: i32
      videos:
        type: i32
      subscribers:
        type: i32

topics:
  channel-id:
    name: channel-id
    schema:
      value:
        type: string
        converter: raw
  output:
    name: output
    schema:
      value:
        type: channel-fetch-response

services:
  youtube-service:
    sources:
    - type: topic
      id: channel-id
    states:
      count-per-channels:
        type: keyed-state
        properties:
          key:
            type: string
          value:
            type: u32

    transforms:
    - operator: map
      run: |
        fn parse_channel(_input: String) -> Result<String> {
          Ok("here".to_string())
        }
    partition:
      assign-key:
        run: |
          fn assign_key_word(_input: String) -> Result<String> {
             Ok("ere".to_string())
          }
      transforms:
      - operator: map
        dependencies:
        - name: sdf-http
          git: "https://github.com/infinyon/sdf-http-guest"
          tag: "v0.4.0"
        - name: serde_json
          version: 1.0.117
        - name: ureq
          version: "2.10.1"
          features: ["json"]
        run: |
          fn fetch_subscribers(channel_id: String) -> Result<ChannelFetchResponse, ChannelFetchResponse> {
              use serde;
              use ureq;

              #[derive(serde::Deserialize)]
              #[serde(rename_all = "camelCase")]
              struct Statistics {
                  view_count: String,
                  subscriber_count: String,
                  hidden_subscriber_count: bool,
                  video_count: String,
              }

              #[derive(serde::Deserialize)]
              struct Channel {
                  id: String,
                  statistics: Statistics,
              }

              #[derive(serde::Deserialize)]
              struct ChannelListResponse {
                  items: Vec<Channel>,
              }
              let url = format!("https://www.googleapis.com/youtube/v3/channels?part=statistics&id={}&key=AIzaSyDaeV77R4b2ZLByGJW2WRtx_fX4JLyqezM", channel_id.as_str());
              let req = ureq::get(&url);

              match req.call() {
                  Ok(res) => match res.into_json::<ChannelListResponse>() {
                      Ok(data) => {
                          let channel_stats = &data.items.first().unwrap().statistics;
                          let channel_stats_views = channel_stats.view_count.parse::<i32>().unwrap();
                          let channel_stats_subs = channel_stats.subscriber_count.parse::<i32>().unwrap();
                          let channel_stats_videos = channel_stats.video_count.parse::<i32>().unwrap();

                          Ok(ChannelFetchResponse {
                              views: channel_stats_views,
                              subscribers: channel_stats_subs,
                              videos: channel_stats_videos,
                          })
                      }
                      Err(_) => Ok(ChannelFetchResponse {
                          views: 0,
                          subscribers: 0,
                          videos: 0,
                      }),
                  },
                  Err(_) => Ok(ChannelFetchResponse {
                      views: -1,
                      subscribers: -1,
                      videos: -1,
                  }),
              }
          }
    sinks:
    - type: topic
      id: output
