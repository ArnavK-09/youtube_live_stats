apiVersion: 0.5.0
meta:
  name: subscribers-count
  version: 0.1.0
  namespace: youtube-live

config:
  converter: json
  consumer:
    default_starting_offset:
      value: 0
      position: End

types:
  channel-fetch-response:
    type: object
    properties:
      id:
        type: string
      handle:
        type: string
      views:
        type: i32
      videos:
        type: i32
      subscribers:
        type: i32
      avatar:
        type: string
  youtube-channel:
    type: object
    properties:
      id:
        type: string
      handle:
        type: string
      avatar:
        type: string

topics:
  channel:
    name: channel
    schema:
      value:
        type: youtube-channel
  channel-handle:
    name: channel-handle
    schema:
      value:
        type: string
        converter: raw
  channel-data:
    name: channel-data
    schema:
      value:
        type: channel-fetch-response

services:
  add-youtube-channel-by-handle:
    sources:
      - type: topic
        id: channel-handle

    transforms:
      - operator: filter
        run: |
          fn filter_channel_handle(channel_handle: String) -> Result<bool, bool> {
              // Alphanumeric, Minimum 3, Maximum 30
              if channel_handle.chars().all(char::is_alphanumeric) == false {
                  Ok(false)
              } else if channel_handle.len() < 3 {
                  Ok(false)
              } else if channel_handle.len() > 30 {
                  Ok(false)
              } else {
                  Ok(true)
              }
          }
      - operator: map
        dependencies:
          - name: serde_json
            version: 1.0.117
          - name: sdf-http
            git: "https://github.com/infinyon/sdf-http-guest"
            tag: "v0.4.0"
        run: |
          fn process_channel_info(channel_handle: String) -> Result<YoutubeChannel> {
            use serde;


            #[derive(serde::Deserialize)]
            struct ChannelThumbnail {
              url: String
            }

            #[derive(serde::Deserialize)]
            struct ChannelThumbnails {
              high: ChannelThumbnail
            }

            #[derive(serde::Deserialize)]
            struct ChannelSnippet {
              thumbnails: ChannelThumbnails
            }

            #[derive(serde::Deserialize)]
            struct ChannelInfo {
                kind: String,
                etag: String,
                id: String,
                snippet: ChannelSnippet
            }

            #[derive(serde::Deserialize)]
            struct ChannelListResponse {
                items: Vec<ChannelInfo>,
            }

            let api_key = std::env::var("YOUTUBE_API_KEY")?;
            let url = format!(
                "https://www.googleapis.com/youtube/v3/channels?part=snippet&forHandle={}&key={}&maxResults=1",
                channel_handle.as_str(),
                api_key
            );
            let req = sdf_http::http::Request::builder()
                .uri(&url)
                .method("GET")
                .body("")?;

            let res = sdf_http::blocking::send(req)?;
            let body: Vec<u8> = res.into_body();
            let response: ChannelListResponse = serde_json::from_slice(&body)?;
            let channel_id = &response.items.first().unwrap().id;
            let channel_avatar = &response.items.first().unwrap().snippet.thumbnails.high.url;

            Ok(YoutubeChannel {
                id: channel_id.to_string(),
                handle: channel_handle,
                avatar: channel_avatar.to_string()
            })
          }
    sinks:
      - type: topic
        id: channel

  youtube-service:
    sources:
      - type: topic
        id: channel

    transforms:
      - operator: map
        dependencies:
          - name: serde_json
            version: 1.0.117
          - name: sdf-http
            git: "https://github.com/infinyon/sdf-http-guest"
            tag: "v0.4.0"
        run: |
          #[allow(dead_code)]
          fn fetch_data(channel: YoutubeChannel) -> Result<ChannelFetchResponse> {
              use serde;

              #[derive(serde::Deserialize)]
              #[serde(rename_all = "camelCase")]
              struct Statistics {
                  view_count: String,
                  subscriber_count: String,
                  hidden_subscriber_count: bool,
                  video_count: String,
              }

              #[derive(serde::Deserialize)]
              struct Channel {
                  id: String,
                  statistics: Statistics,
              }

              #[derive(serde::Deserialize)]
              struct ChannelListResponse {
                  items: Vec<Channel>,
              }

              let api_key = std::env::var("YOUTUBE_API_KEY")?;
              let url = format!(
                  "https://www.googleapis.com/youtube/v3/channels?part=statistics&id={}&key={}&maxResults=1",
                  channel.id.as_str(),
                  api_key
              );
              let req = sdf_http::http::Request::builder()
                  .uri(&url)
                  .method("GET")
                  .body("")?;

              let res = sdf_http::blocking::send(req)?;
              let body: Vec<u8> = res.into_body();
              let response: ChannelListResponse = serde_json::from_slice(&body)?;

              let channel_stats = &response.items.first().unwrap().statistics;
              let channel_stats_views = channel_stats.view_count.parse::<i32>().unwrap();
              let channel_stats_subs = channel_stats.subscriber_count.parse::<i32>().unwrap();
              let channel_stats_videos = channel_stats.video_count.parse::<i32>().unwrap();

              Ok(ChannelFetchResponse {
                  views: channel_stats_views,
                  subscribers: channel_stats_subs,
                  videos: channel_stats_videos,
                  id: channel.id,
                  handle: channel.handle,
                  avatar: channel.avatar
              })
          }

    sinks:
      - type: topic
        id: channel-data
