        #   fn invoke_youtube(channel_id: String) -> Result<ChannelFetchResponse> {

        #   use serde;

        #   #[derive(serde::Deserialize)]
        #   #[serde(rename_all = "camelCase")]
        #   struct Statistics {
        #       view_count: String,
        #       subscriber_count: String,
        #       hidden_subscriber_count: bool,
        #       video_count: String,
        #   }

        #   #[derive(serde::Deserialize)]
        #   struct Channel {
        #       id: String,
        #       statistics: Statistics,
        #   }

        #   #[derive(serde::Deserialize)]
        #   struct ChannelListResponse {
        #       items: Vec<Channel>,
        #   }

        #   let url = &format!(
        #         "https://www.googleapis.com/youtube/v3/channels?part=statistics&id={}&key=AIzaSyDaeV77R4b2ZLByGJW2WRtx_fX4JLyqezM",
        #         channel_id
        #     );

        #   let request = sdf_http::http::Request::builder()
        #     .uri(url)
        #     .method("GET").body("hi")?;
        #   let response = sdf_http::blocking::send(request)?;
        #   let body: Vec<u8> = response.into_body();

        #   let data_response: ChannelListResponse = serde_json::from_slice(&body)?;
        #   println!("output: {}", String::from_utf8(body)?);

        #   Ok(ChannelFetchResponse {
        #                 views: 0,
        #                 subscribers: 0,
        #                 videos: 0,
        #             })
        #   }