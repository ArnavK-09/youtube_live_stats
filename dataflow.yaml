apiVersion: 0.5.0

meta: 
  name: pokedex
  version: 0.0.1
  namespace: arnavk

config:
  converter: json


types:
  value:
    type: object
    properties:
      input:
        type: string
      model:
        type: string

topics:
  pokemon-name:
    schema:
      value:
        type: string
        converter: raw

services:
  get-pokemon:
    sources:
      - type: topic
        id: pokemon-name
    transforms:
      - operator: map
        dependencies:
          - name: serde
            version: "1.0"
          - name: reqwest
            version: "0.12"
            features: 
              - json
              - blocking
        run: |
          fn get_pokemon(pokemon_name: String) -> Result<Value, Value> {
              use reqwest;
              use serde_json::json;
              use serde_json::Value;


              let url = "https://pokeapi.co/api/v2/pokemon/".to_owned() + pokemon_name.as_str();
              let response = reqwest::blocking::get(url);

              match response {
                  Ok(resp) => {
                      if resp.status().is_success() {
                          let json: Value = resp.json().unwrap();
                          Ok(json)
                      } else if resp.status().as_u16() == 404 {
                          let error_json = json!({
                              "error": "PokÃ©mon not found",
                              "status": 404
                          });
                          Err(error_json)
                      } else {
                          let error_json = json!({
                              "error": "Unexpected error",
                              "status": resp.status().as_u16()
                          });
                          Err(error_json)
                      }
                  }
                  Err(_) => {
                      let error_json = json!({
                          "error": "Failed to connect to the server"
                      });
                      Err(error_json)
                  }
              }
          }
